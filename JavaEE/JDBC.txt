数据库基本过程

static void test(){
	//1.注册驱动(三种方式)
	DriverManager.registerDriver(new com.mysql.jdbc.Driver());
	System.setProperty("jdbc.drivers", "com.mysql.jdbc.Driver");
	Class.forName("com.mysql.jdbc.Driver");  //推荐方式

	//2.建立连接
	String url = "jdbc:mysql://localhost:3306/dataBase";
	String user = "root";
	String password = "root";
	Connection conn = DriverManager.getConnection(url,user,password);

	//3.创建语句
	Statement st = conn.createStatement();

	//4.执行语句
	ResultSet rs = st.executeQuery("select * form user");

	//5.处理结果
	while(rs.next()){
		System.out.println(rs.getObject(1)+....);
	}

	//6.释放资源 (非常重要)
	rs.close();
	st.close();
	conn.close();
}

static void template(){
	String url = "jdbc:mysql://localhost:3306/dataBase";
	String user = "root";
	String password = "root";
	Connection conn = null;
	Statement st = null;
	ResultSet rs = null;
	try{
		//1.注册驱动
		Class.forName("com.mysql.jdbc.Driver");
		
		//2.建立连接
		Connection conn = DriverManager.getConnection(url,user,password);
		
		//3.创建语句
		Statement st = conn.createStatement();

		//4.执行语句
		ResultSet rs = st.executeQuery("select * form user");

		//5.处理结果
		while(rs.next()){
			System.out.println(rs.getObject(1)+....);
	}
	}finally{
		try {
			if (rs != null)
				rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				if (conn != null)
					try {
						conn.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}
			}
		}
	}
}


数据库的一些操作CRUD(增删改查)

create(){
	conn=...
	st=...
	String sql = "insert into user(name,birthday,money) values ('kwk','1997-9-5',400)";
	int i = st.executeUpdate(sql);  //返回一个数字
	
}

read()
//建议的获取数据方法，尽量不要用*
rs = st.executeQuery("select id,name,birthday,money form user");
rs.getObject("id(/name/birthday/money)");

update(){
	conn=...
	st=...
	String sql = "update user set money=money+10";
	int i = st.executeUpdate(sql);  //返回一个数字，表示修改数据的条数
}

delete(){
	conn=...
	st=...
	String sql = "delete from user where id>4";
	int i = st.executeUpdate(sql);  //返回一个数字，表示修改数据的条数
}

重点就是查询read()
static void read(String name) {
	conn=...
	st=conn.createStatement();
	String sql = "select id,name,birthday,money from user where name='"+name+"'";  //sql注入，因为单引号而出现的问题
	rs = st.executeQuery(sql);
	while(rs.next()){
		
	}
//解决方案，使用prepareStatement消除sql注入
//同时，在执行很多次查询时，PrepareStatement的效率比Statement高(因数据库，驱动不同而不同)
	conn=...
	String sql = "select id,name,birthday,money from user where name=? and age=? and ...";
	PrepareStatement ps = conn.prepareStatement(sql);  //预处理语句
	ps.setString(1, name);
	
	rs = ps.executeQuery();		//这里不要传参数，加入传参数sql，则会直接使用sql去查询，而不是使用预处理的sql
	
	while(rs.next()){
		//处理结果
	}
}

常见问题：

//将java.util.Date类型存入数据库时，要转为java.sql.Date（java.sql.Date继承java.util.Date）
new java.sql.Date(birthday.getTime());		//父类转为子类

//varchar(name)最多只能存储45个字符，当需要存储大文本，要用text，Clob类型存储

//使用字符流将文本存入数据库
File file = new File("dir");
Reader reader = new BufferedReader(new FileReader(file));
ps.setCharaterStream(1,reader,file.length());
//从数据库中读取大文本，并存入文件中
Clob clob = rs.getClob(1);
Reader reader = clob.getCharaterStream();	
//rs.getCharaterStream(1);

File file = new File("dir");
Writer writer = new BufferedWriter(new FileWriter(file));

char[] buff = new char[1024];
int length;
while((length = reader.read(buff)) > 0){
	writer.write(buff,0,length);
}

writer.close();
reader.close();

//read()处理数据后一般要返回数据，不能返回ResultSet

/**DAO：1.先设计domain对象(class User)
		2.定义接口(interface UserDao)，把需要对User的操作封装在里面
		3.实现接口(class UserDaoJbdcImpl implements UserDao)
		
	SQLException处理：不可以简单的打印，将编译时异常转换为运行时异常throw new DaoException(e.getMessage(),e)
*/

/*工厂模式
	利用简单工程模式降低程序的耦合度，让接口实现的时候从配置文件中读取具体实现类
	 
*/

//事务
conn.setAutoCommit(false);//设置不自动提交
conn.commit();
conn.rollback();

//SavePoint保存部分操作
SavePoint sp = conn.setSavePoint();
conn.rollback(sp);